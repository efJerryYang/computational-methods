import numpy as np
import pandas as pd
from matplotlib.pyplot import plot as plt


def newtons_method_origin():
    rtn_list = []
    x = np.pi / 2
    for i in range(50):
        newton_iter_term = (np.sin(x) - x / 2) / (2 * np.cos(x) - 1)
        y = x - newton_iter_term
        # print(f'x_{i:2} = {x:.10f}')
        rtn_list.append(x)
        x = y
    return rtn_list


def newtons_method_multi_root(r=1):
    rtn_list = []
    x = np.pi / 2
    for i in range(50):
        newton_iter_term = (np.sin(x) - x / 2) / (2 * np.cos(x) - 1)
        y = x - r * newton_iter_term
        rtn_list.append(x)
        x = y
    return rtn_list


# def newton_iter_unknown_root():
#     rtn_list = []
#     x = np.pi / 2
#     print('Origin Newton Iteration Method:')
#     for i in range(50):
#         newton_iter_term = (np.sin(x) - x / 2) / (2 * np.cos(x) - 1)
#         y = x - r * newton_iter_term
#         rtn_list.append(x)
#         x = y
#     np.der
#     return rtn_list
def f2(x):
    return x ** 3 - 2 * x - 5


def binary_2():
    l, r = 2.0, 3.0
    for i in range(20):
        m = (l + r) / 2
        fl, fm, fr = f2(l), f2(m), f2(r)
        print(f"iter:{i:2}\tf({l:10.6f})={fl:10.6f}\tf({r:10.6f})={fr:10.6}\tf({m:10.6f})={fm:10.6}\t", end="")
        judge = fl * fm
        result = None
        if judge < 0:
            r = m
        elif judge == 0:
            result = m
            break
        else:
            l = m
        result = m
        print(f"x={result:10.6f}")


def f(x):
    return np.cos(x) - x * np.exp(x)


# def find_root(x_q, x_p):
#     if f(x_q) * f(x_p) < 0 :
#         return x_q, x_p
#     elif f(x_q) * f(x_p) == 0:
#         return x_p
#     else:


def secant_method():
    x_q, x_p = 0, 1
    print("i\tf(x)\tx_{i+1}\tx_{i}\tx_{i-1}")
    print(0, f(x_q))
    print(1, f(x_p))
    for i in range(2, 50):
        if x_p == x_q:
            break
        x_r = f(x_p) * x_q / (f(x_p) - f(x_q)) + f(x_q) * x_p / (f(x_q) - f(x_p))
        print(i, f(x_r), '\t', x_r, x_p, x_q, np.abs(x_r - x_p))
        x_p, x_q = x_r, x_p


def false_position_method():
    x_q, x_p = 0, 1
    print("i\tf(x)\tx_{i+1}\tx_{i}\tx_{i-1}")
    print(0, f(x_q))
    print(1, f(x_p))
    for i in range(2, 50):
        x_r = f(x_p) * x_q / (f(x_p) - f(x_q)) + f(x_q) * x_p / (f(x_q) - f(x_p))
        print(i, f(x_r), '\t', x_r, x_p, x_q, np.abs(x_r - x_p))
        if x_p == x_r:
            break
        if f(x_r) * f(x_p) < 0:
            x_p, x_q = x_r, x_p
        elif f(x_r) * f(x_p) == 0:
            break
        else:
            x_p, x_q = x_r, x_q


def false_pos_bin_method():
    x_q, x_p = 0, 1
    print("i\tf(x)\tx_{i+1}\tx_{i}\tx_{i-1}")
    print(0, f(x_q))
    print(1, f(x_p))
    for i in range(2, 50):
        x_r = f(x_p) * x_q / (f(x_p) - f(x_q)) + f(x_q) * x_p / (f(x_q) - f(x_p))
        print(i, f(x_r), '\t', x_r, x_p, x_q, np.abs(x_r - x_p))
        if x_p == x_r:
            break
        if f(x_r) * f(x_p) < 0:
            x_p, x_q = x_r, x_p
        elif f(x_r) * f(x_p) == 0:
            break
        else:
            x_p, x_q = (x_r + x_q) / 2, x_r


def illinois_method():
    x_q, x_p = 0, 1
    print("i\tf(x)\tx_{i+1}\tx_{i}\tx_{i-1}")
    print(0, f(x_q))
    print(1, f(x_p))
    for i in range(2, 50):
        x_r = f(x_p) * x_q / (f(x_p) - f(x_q)) + f(x_q) * x_p / (f(x_q) - f(x_p))
        print(i, f(x_r), '\t', x_r, x_p, x_q, np.abs(x_r - x_p))
        if x_p == x_r:
            break
        if f(x_r) * f(x_p) < 0:
            x_p, x_q = x_r, x_p
        elif f(x_r) * f(x_p) == 0:
            break
        else:
            beta = 1 / 2
            x_p, x_q = f(x_r) * x_q / (f(x_r) - beta * f(x_q)) + f(x_q) * beta * x_r / (f(x_q) * beta - f(x_r)), x_p
            # x_p, x_q = (x_r + x_q) / 2, x_r


def pegasus_method():
    x_q, x_p = 0, 1
    print("i\tf(x)\tx_{i+1}\tx_{i}\tx_{i-1}")
    print(0, f(x_q))
    print(1, f(x_p))
    for i in range(2, 50):
        x_r = f(x_p) * x_q / (f(x_p) - f(x_q)) + f(x_q) * x_p / (f(x_q) - f(x_p))
        print(i, f(x_r), '\t', x_r, x_p, x_q, np.abs(x_r - x_p))
        if x_p == x_r:
            break
        if f(x_r) * f(x_p) < 0:
            x_p, x_q = x_r, x_p
        elif f(x_r) * f(x_p) == 0:
            break
        else:
            beta = f(x_p) / (f(x_p) + f(x_r))
            x_p, x_q = f(x_r) * x_q / (f(x_r) - beta * f(x_q)) + f(x_q) * beta * x_r / (f(x_q) * beta - f(x_r)), x_p
            # x_p, x_q = (x_r + x_q) / 2, x_r


if __name__ == '__main__':
    # x1, x2 = newtons_method_origin(), newtons_method_multi_root(2)
    # for i in range(50):
    #     print(f'x_{i:2}\t{x1[i]:.10f}\t{x2[i]:.10f}')
    # binary_2()
    # secant_method()
    # false_position_method()
    # illinois_method()
    pegasus_method()

"""secant
i	f(x)	x_{i+1}	x_{i}	x_{i-1}
0 1.0
1 -2.1779795225909053
2 0.5198711737709334 	 0.31466533780077094 1 0 0.6853346621992291
3 0.20354477776832092 	 0.4467281445913339 0.31466533780077094 1 0.13206280679056298
4 -0.04293109323474609 	 0.5317058606445457 0.4467281445913339 0.31466533780077094 0.0849777160532118
5 0.0025927631411296614 	 0.5169044675673677 0.5317058606445457 0.4467281445913339 0.014801393077177982
6 3.0111941065391612e-05 	 0.5177474652714948 0.5169044675673677 0.5317058606445457 0.000842997704127102
7 -2.1513164583097932e-08 	 0.5177573707542169 0.5177474652714948 0.5169044675673677 9.905482722061265e-06
8 1.780797731498751e-13 	 0.5177573636823998 0.5177573707542169 0.5177474652714948 7.071817131887315e-09
9 1.1102230246251565e-16 	 0.5177573636824583 0.5177573636823998 0.5177573707542169 5.850875339774575e-14
10 1.1102230246251565e-16 	 0.5177573636824583 0.5177573636824583 0.5177573636823998 0.0
"""
"""falsePosition
i	f(x)	x_{i+1}	x_{i}	x_{i-1}
0 1.0
1 -2.1779795225909053
2 0.5198711737709334 	 0.31466533780077094 1 0 0.6853346621992291
3 0.20354477776832092 	 0.4467281445913339 0.31466533780077094 1 0.13206280679056298
4 0.07080234897836524 	 0.49401533659589875 0.4467281445913339 1 0.047287192004564826
5 0.023607718826251345 	 0.509946140365247 0.49401533659589875 1 0.015930803769348245
6 0.007760113728615847 	 0.5152010099022496 0.509946140365247 1 0.005254869537002604
7 0.0025388646887646305 	 0.5169222100105166 0.5152010099022496 1 0.0017212001082670403
8 0.0008293578901883425 	 0.517484676784512 0.5169222100105166 1 0.000562466773995407
9 0.0002707857277036707 	 0.5176683449777302 0.517484676784512 1 0.00018366819321813388
10 8.839713027164464e-05 	 0.5177283052714122 0.5176683449777302 1 5.996029368204869e-05
11 2.885541037878081e-05 	 0.5177478783221142 0.5177283052714122 1 1.957305070199311e-05
12 9.419085428619134e-06 	 0.5177542674540466 0.5177478783221142 1 6.389131932404979e-06
13 3.074593700191919e-06 	 0.5177563530081399 0.5177542674540466 1 2.085554093311792e-06
14 1.0036121709244838e-06 	 0.5177570337772521 0.5177563530081399 1 6.807691121935022e-07
15 3.2759996093645327e-07 	 0.5177572559945329 0.5177570337772521 1 2.2221728079863112e-07
16 1.0693544383322262e-07 	 0.5177573285308809 0.5177572559945329 1 7.253634792814267e-08
17 3.490595112953798e-08 	 0.5177573522082531 0.5177573285308809 1 2.3677372285035858e-08
18 1.1394027832345444e-08 	 0.5177573599370393 0.5177573522082531 1 7.72878616661643e-09
19 3.7192475765834843e-09 	 0.5177573624598757 0.5177573599370393 1 2.5228363842444423e-09
20 1.214039535568645e-09 	 0.517757363283382 0.5177573624598757 1 8.235062631811729e-10
21 3.9628811343561665e-10 	 0.5177573635521914 0.517757363283382 1 2.6880941916829215e-10
22 1.293565254911755e-10 	 0.5177573636399365 0.5177573635521914 1 8.77451444836197e-11
23 4.2224446161753804e-11 	 0.5177573636685784 0.5177573636399365 1 2.8641866656187176e-11
24 1.3783085783813931e-11 	 0.5177573636779276 0.5177573636685784 1 9.349188090368443e-12
25 4.499178807293447e-12 	 0.5177573636809794 0.5177573636779276 1 3.0517810500896303e-12
26 1.4682699500667695e-12 	 0.5177573636819757 0.5177573636809794 1 9.963141422986155e-13
27 4.792832797306801e-13 	 0.5177573636823007 0.5177573636819757 1 3.2507330161024584e-13
28 1.5643042416968456e-13 	 0.5177573636824069 0.5177573636823007 1 1.0613732115416497e-13
29 5.1181281435219717e-14 	 0.5177573636824415 0.5177573636824069 1 3.4638958368304884e-14
30 1.63202784619898e-14 	 0.517757363682453 0.5177573636824415 1 1.1435297153639112e-14
31 5.440092820663267e-15 	 0.5177573636824565 0.517757363682453 1 3.552713678800501e-15
32 1.6653345369377348e-15 	 0.5177573636824577 0.5177573636824565 1 1.2212453270876722e-15
33 7.771561172376096e-16 	 0.5177573636824581 0.5177573636824577 1 3.3306690738754696e-16
34 3.3306690738754696e-16 	 0.5177573636824582 0.5177573636824581 1 1.1102230246251565e-16
35 3.3306690738754696e-16 	 0.5177573636824582 0.5177573636824582 1 0.0
"""

"""Illinois
i	f(x)	x_{i+1}	x_{i}	x_{i-1}
0 1.0
1 -2.1779795225909053
2 0.5198711737709334 	 0.31466533780077094 1 0 0.6853346621992291
3 0.20354477776832092 	 0.4467281445913339 0.31466533780077094 1 0.13206280679056298
4 0.009121103950498255 	 0.5147515380759392 0.5338558718984857 0.31466533780077094 0.019104333822546504
5 0.00012247607141047112 	 0.5177171022689937 0.5147515380759392 0.5338558718984857 0.002965564193054493
6 2.9894694675292044e-07 	 0.5177572654132884 0.5177963529997437 0.5147515380759392 3.9087586455321954e-05
7 9.759193453362514e-12 	 0.5177573636792503 0.5177572654132884 0.5177963529997437 9.826596192308301e-08
8 1.1102230246251565e-16 	 0.5177573636824583 0.5177573636856662 0.5177572654132884 3.2078784073519273e-12
9 1.1102230246251565e-16 	 0.5177573636824583 0.5177573636824583 0.5177573636856662 0.0
"""

"""Pegasus
i	f(x)	x_{i+1}	x_{i}	x_{i-1}
0 1.0
1 -2.1779795225909053
2 0.5198711737709334 	 0.31466533780077094 1 0 0.6853346621992291
3 0.20354477776832092 	 0.4467281445913339 0.31466533780077094 1 0.13206280679056298
4 -0.004240758794728405 	 0.5191497521634133 0.5103990165632802 0.31466533780077094 0.008750735600133064
5 2.6172927591217032e-05 	 0.5177487601151236 0.5191497521634133 0.5103990165632802 0.0014009920482896954
6 3.049369590168993e-08 	 0.5177573536586397 0.5177487601151236 0.5191497521634133 8.593543516122182e-06
7 -3.3306690738754696e-16 	 0.5177573636824584 0.5177573636824446 0.5177487601151236 1.3766765505351941e-14
8 1.1102230246251565e-16 	 0.5177573636824583 0.5177573636824584 0.5177573636824446 1.1102230246251565e-16
9 1.1102230246251565e-16 	 0.5177573636824583 0.5177573636824583 0.5177573636824584 0.0
"""
