precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{REPL.LineEdit.var"#refresh_multi_line##kw", Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.PackageCompletion, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{Markdown.var"#@md_str", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Setfield.__init__)})
precompile(Tuple{Setfield.var"#14#17"})
precompile(Tuple{Setfield.var"#15#18"})
precompile(Tuple{Setfield.var"#16#19"})
precompile(Tuple{Printf.var"#@printf", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{Type{Printf.Spec{Base.Val{Char(0x64000000)}}}, Bool, Bool, Bool, Bool, Bool, Int64, Int64})
precompile(Tuple{Type{Printf.Format{S, T} where T where S}, Base.CodeUnits{UInt8, String}, Array{Base.UnitRange{Int64}, 1}, Tuple{Printf.Spec{Base.Val{Char(0x64000000)}}}})
precompile(Tuple{Crayons.var"#@crayon_str", LineNumberNode, Module, String})
precompile(Tuple{Type{Crayons.ANSIStyle}, Bool})
precompile(Tuple{Type{Crayons.Crayon}, Crayons.ANSIColor, Crayons.ANSIColor, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle})
precompile(Tuple{LaTeXStrings.var"#@L_str", LineNumberNode, Module, String})
precompile(Tuple{typeof(LaTeXStrings.latexstring), String})
precompile(Tuple{typeof(Base.println), LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.println), Base.TTY, LaTeXStrings.LaTeXString})
precompile(Tuple{Base.var"##s78#203", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol}}, Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{typeof(Main.show_result), Function, Function, Float64, Float64, Float64, Int64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Main.collect_data), Function, Function, Function, Function, Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{typeof(Roots.find_non_zero), Roots.FnWrapper, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Roots._non_zero), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Core.Compiler.return_type), Any, Any, UInt64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Roots.FnWrapper, Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Roots.FnWrapper, Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Roots.identify_starting_point), Float64, Float64, Array{Float64, 1}})
precompile(Tuple{Type{Roots.ZeroProblem{F, X} where X where F}, Roots.FnWrapper, Tuple{Float64, Float64}})
precompile(Tuple{typeof(CommonSolve.solve), Roots.ZeroProblem{Roots.FnWrapper, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Roots.init_state), Roots.AlefeldPotraShi, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Float64, Float64, Float64, Float64})
precompile(Tuple{Roots.var"##init_state#42", Float64, Float64, typeof(Roots.init_state), Roots.AlefeldPotraShi, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Float64, Float64, Float64, Float64})
precompile(Tuple{Type{Roots.Tracks{T, S} where S where T}, Bool, Roots.NullTracks, Roots.AlefeldPotraShiState{Float64, Float64}})
precompile(Tuple{Type{Roots.ZeroProblemIterator{M, N, F, S, O, L} where L where O where S where F where N where M}, Roots.AlefeldPotraShi, Nothing, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Roots.AlefeldPotraShiState{Float64, Float64}, Roots.FExactOptions{Float64, Float64}, Roots.NullTracks})
precompile(Tuple{ConstructionBase.var"##s26#3", Any, Any})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{CommonSolve.var"#solve!##kw", NamedTuple{(:verbose,), Tuple{Bool}}, typeof(CommonSolve.solve!), Roots.ZeroProblemIterator{Roots.AlefeldPotraShi, Nothing, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Roots.AlefeldPotraShiState{Float64, Float64}, Roots.FExactOptions{Float64, Float64}, Roots.NullTracks}})
precompile(Tuple{typeof(Roots._unitless), Float64})
precompile(Tuple{typeof(Roots.isneg), Float64})
precompile(Tuple{typeof(Roots.has_converged), Base.Val{:exact}, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Roots.make_intervals!), Array{Roots.Interval{Float64}, 1}, Roots.FnWrapper, Float64, Float64, Array{Float64, 1}, Int64, Float64, Float64, Float64, Float64})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{typeof(Main.df)}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), typeof(Main.df), Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.f), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:alignment, :header, :header_crayon), Tuple{Array{Symbol, 1}, Array{String, 1}, Crayons.Crayon}}, typeof(PrettyTables.pretty_table), Array{Any, 2}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:alignment, :header, :header_crayon), Tuple{Array{Symbol, 1}, Array{String, 1}, Crayons.Crayon}}, typeof(PrettyTables._pretty_table), IO, Array{Any, 2}})
precompile(Tuple{typeof(Base.displaysize), Base.IOContext{Base.TTY}})
precompile(Tuple{typeof(PrettyTables._compute_row_fill_vectors), Base.UnitRange{Int64}, Int64, Symbol})
precompile(Tuple{typeof(PrettyTables._compute_cell_alignment_override), Array{Any, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(PrettyTables._fill_matrix_data!), Array{String, 2}, Array{Array{String, 1}, 2}, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Int64, Any, Any, Ref{Any}, PrettyTables.Display, Bool, Bool, Array{Int64, 1}, Bool, Bool, Bool, Bool, Array{Int64, 1}, Array{Int64, 1}, Bool, Base.Val{:print}, Symbol})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), String})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), String})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Float64})
precompile(Tuple{typeof(PrettyTables._apply_alignment_anchor_regex!), Array{Array{String, 1}, 2}, Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Symbol, Base.Dict{Int64, Symbol}, Base.Dict{Int64, Array{Base.Regex, 1}}, Base.Dict{Tuple{Int64, Int64}, Symbol}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(PrettyTables._create_printing_recipe), PrettyTables.Display, Int64, Int64, Int64, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Symbol, Bool, Bool, Symbol})
precompile(Tuple{typeof(PrettyTables._print_table_header!), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Any, Array{String, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Ref{Any}, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Array{Crayons.Crayon, 1}, Array{Crayons.Crayon, 1}, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(Crayons._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(PrettyTables._print_table_data), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Any, Array{Array{String, 1}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Tuple{Int64, Int64, Int64, Int64}, 1}, Array{Int64, 1}, Array{Symbol, 1}, Tuple{Char, Char, Char, Char}, Base.Dict{Tuple{Int64, Int64}, Symbol}, Symbol, Int64, Ref{Any}, Bool, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(PrettyTables._flush_buffer!), Base.IOContext{Base.TTY}, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool, Int64})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{typeof(Main.df)}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), typeof(Main.df), Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{typeof(Main.df)}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), typeof(Main.df), Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.show_result), Function, Function, Float64, Int64, Float64, Float64, Int64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{typeof(Roots.quad_vertex), Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{typeof(Main.df)}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), typeof(Main.df), Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), typeof(Main.df), Float64, Float64, Int64, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Markdown.MD})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.LineEdit.var"#153#206", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#153#206", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.LineEdit.var"#152#205", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#152#205", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.write), REPL.Terminals.TTYTerminal, Char})
precompile(Tuple{typeof(REPL.Terminals.cmove_left), REPL.Terminals.TTYTerminal})
precompile(Tuple{Base.var"#632#633"{REPL.LineEdit.var"#19#20"{REPL.LineEdit.PromptState}, Base.Timer}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.LineEdit.var"#158#211", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#158#211", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Bool})
precompile(Tuple{Type{Markdown.Header{5}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{5}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Base.vcat), Float64, Float64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Main.show_result), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:header_crayon, :tf, :noheader, :formatters), T} where T<:Tuple}, Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables.pretty_table), Array{Any, 2}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables._pretty_table), IO, Array{Any, 2}})
precompile(Tuple{PrettyTables.var"#52#54"{Array{String, 1}}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Function}, String})
precompile(Tuple{Printf.var"#@sprintf", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{Formatting.var"#1#4", Float64})
precompile(Tuple{Formatting.var"#11#12", Float64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{PrettyTables.var"#52#54"{Array{String, 1}}, Function, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Function})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.IOContext{Base.TTY}}}, typeof(Base.sprint), Function, Function})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Function})
precompile(Tuple{typeof(Base._replace!), Base.var"#new#329"{Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}}}, Array{Any, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String, Vararg{Any}})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables.pretty_table), Array{Float64, 1}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables._pretty_table), IO, Array{Float64, 1}})
precompile(Tuple{typeof(PrettyTables._compute_cell_alignment_override), Array{Float64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Float64, Vararg{Number}})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Float64}, Tuple{Int64, Int64, Int64, Int64}, Float64, Vararg{Number}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 2}, Tuple{Float64, Float64, Int64, Int64, Float64, Float64, Float64, Int64, Int64, Float64, Float64, Float64, Int64, Int64, Float64, Float64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Number}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Float64}, Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Number}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 2}, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Base.vcat), Int64, Int64, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Main.show_result), Array{Int64, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 2}, Tuple{Int64, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.vcat), Int64, Float64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 1}, Tuple{Int64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64}, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Markdown.linebreak), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.escapes), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
