precompile(Tuple{Base.var"#@r_str", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Array{UInt8, 1}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Array{Grisu.Bignums.Bignum, 1}, 1}, Array{Grisu.Bignums.Bignum, 1}})
precompile(Tuple{Plots.var"#289#325", REPL.LineEditREPL})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{Markdown.var"#@md_str", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{Type{Markdown.Header{2}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{2}})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Markdown.MD})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{Base.TTY}, Markdown.Header{2}, Int64})
precompile(Tuple{Type{Markdown.Header{3}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{3}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.List})
precompile(Tuple{Type{Markdown.List}, Array{Any, 1}, Int64, Bool})
precompile(Tuple{Type{Markdown.Header{4}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{4}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.LaTeX})
precompile(Tuple{LaTeXStrings.var"#@L_str", LineNumberNode, Module, String})
precompile(Tuple{Type{NamedTuple{(:maxsize,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:maxsize,), Tuple{Int64}}, Type{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.getindex), String, Int64})
precompile(Tuple{typeof(LaTeXStrings.latexstring), String})
precompile(Tuple{typeof(Base.string), Char, String, Vararg{Union{Char, Base.SubString{String}, String}}})
precompile(Tuple{typeof(Main.show_result), Function, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, String, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.f), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.f), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.lagrange), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:alignment, :header, :formatters), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Array{String, 1}, PrettyTables.var"#52#54"{Array{String, 1}}}})
precompile(Tuple{Base.var"##s78#203", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol}}, Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:alignment, :header, :formatters), Tuple{Array{Symbol, 1}, Array{String, 1}, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables.pretty_table), Array{Float64, 2}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:alignment, :header, :formatters), Tuple{Array{Symbol, 1}, Array{String, 1}, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables._pretty_table), IO, Array{Float64, 2}})
precompile(Tuple{typeof(Base.get), Base.IOContext{Base.TTY}, Symbol, Bool})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(PrettyTables._compute_row_fill_vectors), Base.UnitRange{Int64}, Int64, Symbol})
precompile(Tuple{typeof(PrettyTables._compute_cell_alignment_override), Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(PrettyTables._fill_matrix_data!), Array{String, 2}, Array{Array{String, 1}, 2}, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Int64, Any, Any, Ref{Any}, PrettyTables.Display, Bool, Bool, Array{Int64, 1}, Bool, Bool, Bool, Bool, Array{Int64, 1}, Array{Int64, 1}, Bool, Base.Val{:print}, Symbol})
precompile(Tuple{typeof(Base.isassigned), Array{String, 1}, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), String})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, String, Vararg{String}})
precompile(Tuple{typeof(Base.escape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{PrettyTables.var"#52#54"{Array{String, 1}}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Function}, String})
precompile(Tuple{Printf.var"#@sprintf", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{Formatting.var"#1#4", Float64})
precompile(Tuple{Formatting.var"#11#12", Float64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(PrettyTables._apply_alignment_anchor_regex!), Array{Array{String, 1}, 2}, Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Symbol, Base.Dict{Int64, Symbol}, Base.Dict{Int64, Array{Base.Regex, 1}}, Base.Dict{Tuple{Int64, Int64}, Symbol}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Array{Base.Regex, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.KeySet{Int64, Base.Dict{Int64, Array{Base.Regex, 1}}}})
precompile(Tuple{typeof(Base._replace!), Base.var"#new#329"{Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, Int64}}}, Array{Any, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Any, 1}, Tuple{Array{Any, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.in), Int64, Base.Set{Any}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Int64})
precompile(Tuple{Type{Array{Int64, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.in), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base._replace!), Base.var"#new#329"{Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}}}, Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(PrettyTables._create_printing_recipe), PrettyTables.Display, Int64, Int64, Int64, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Symbol, Bool, Bool, Symbol})
precompile(Tuple{typeof(PrettyTables._print_table_header!), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Any, Array{String, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Ref{Any}, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Array{Crayons.Crayon, 1}, Array{Crayons.Crayon, 1}, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon, String, Vararg{Any}})
precompile(Tuple{typeof(Crayons._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(PrettyTables._print_table_data), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Any, Array{Array{String, 1}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Tuple{Int64, Int64, Int64, Int64}, 1}, Array{Int64, 1}, Array{Symbol, 1}, Tuple{Char, Char, Char, Char}, Base.Dict{Tuple{Int64, Int64}, Symbol}, Symbol, Int64, Ref{Any}, Bool, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tuple{Int64, Int64}, Symbol}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(PrettyTables._flush_buffer!), Base.IOContext{Base.TTY}, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool, Int64})
precompile(Tuple{typeof(Main.show_result), Function, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Any, 1}, String, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.isequal), Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.show_result), Function, Nothing, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Any, 1}, String, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.f), Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.lagrange), Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hcat), Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{Base.TTY}, Markdown.Header{3}, Int64})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{Base.TTY}, Markdown.List, Int64})
precompile(Tuple{Markdown.var"#169#170"{Int64, Array{Any, 1}}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Printf.var"#@printf", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{Type{Printf.Format{S, T} where T where S}, Base.CodeUnits{UInt8, String}, Array{Base.UnitRange{Int64}, 1}, Tuple{}})
precompile(Tuple{typeof(Main.romberg), typeof(Main.f), Tuple{Int64, Int64}, Int64, Float64})
precompile(Tuple{typeof(Printf.format), Base.TTY, Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Base.Val{Char(0x66000000)}}}}, Float64})
precompile(Tuple{typeof(Printf.format), Base.TTY, Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{}}})
precompile(Tuple{typeof(Main.romberg), typeof(Main.f), Tuple{Int64, Int64}, Int64, Float64})
precompile(Tuple{typeof(Main.romberg), typeof(Main.f), Tuple{Int64, Int64}, Int64, Float64})
precompile(Tuple{typeof(Main.romberg), typeof(Main.f), Tuple{Int64, Int64}, Int64, Float64})
precompile(Tuple{typeof(Markdown.underscore_bold), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.underscore_italic), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{Type{Markdown.Header{5}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{5}})
precompile(Tuple{typeof(Main.show_result), Function, Function, Function, Tuple{Float64, Float64}, Float64, Array{Int64, 1}, Bool, Bool, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Main.rungekutta), typeof(Main.f2), Tuple{Float64, Float64}, Float64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.f3), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f3), Tuple{Array{Float64, 1}}}})
precompile(Tuple{Formatting.var"#13#14", Float64})
precompile(Tuple{typeof(Main.rungekutta), typeof(Main.f2), Tuple{Float64, Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f3), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.rungekutta), typeof(Main.f2), Tuple{Float64, Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f3), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.rungekutta), typeof(Main.f2), Tuple{Float64, Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f3), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.rungekutta), typeof(Main.f2), Tuple{Float64, Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f3), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.rungekutta), typeof(Main.f2), Tuple{Float64, Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f3), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.rungekutta), typeof(Main.f2), Tuple{Float64, Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f3), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Markdown.tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Italic})
precompile(Tuple{Type{Markdown.Italic}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.terminline), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Markdown.Italic})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(ArrayInterface.__init__)})
precompile(Tuple{ArrayInterface.var"#42#69"})
precompile(Tuple{ArrayInterface.var"#43#70"})
precompile(Tuple{ArrayInterface.var"#44#71"})
precompile(Tuple{ArrayInterface.var"#45#72"})
precompile(Tuple{ArrayInterface.var"#46#73"})
precompile(Tuple{ArrayInterface.var"#47#74"})
precompile(Tuple{ArrayInterface.var"#100#104"})
precompile(Tuple{ArrayInterface.var"#101#105"})
precompile(Tuple{ArrayInterface.var"#102#106"})
precompile(Tuple{typeof(FiniteDiff.__init__)})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.IdDict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cwstring}, String})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{DataType, Ptr{PyCall.PyObject_struct}}, Any, Any})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pyerror), String})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyError, Symbol})
precompile(Tuple{typeof(Base.unsafe_load), Ptr{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyerror), String, PyCall.PyError})
precompile(Tuple{typeof(Base.get!), PyCall.var"#115#116"{Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(SymPy.__init__)})
precompile(Tuple{typeof(PyCall.pyimport_conda), String, String, String})
precompile(Tuple{typeof(Base.getproperty), SymPy.Sym, Symbol})
precompile(Tuple{typeof(Base.copy!), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.mpmath_init)})
precompile(Tuple{typeof(PyCall.pytype_mapping), PyCall.PyObject, Type})
precompile(Tuple{typeof(Base.convert), Type{Bool}, PyCall.PyObject})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Setfield.__init__)})
precompile(Tuple{Setfield.var"#14#17"})
precompile(Tuple{Setfield.var"#15#18"})
precompile(Tuple{Setfield.var"#16#19"})
precompile(Tuple{Type{Printf.Spec{Base.Val{Char(0x64000000)}}}, Bool, Bool, Bool, Bool, Bool, Int64, Int64})
precompile(Tuple{Type{Printf.Format{S, T} where T where S}, Base.CodeUnits{UInt8, String}, Array{Base.UnitRange{Int64}, 1}, Tuple{Printf.Spec{Base.Val{Char(0x64000000)}}}})
precompile(Tuple{SymPy.var"#@syms", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(SymPy._gensyms), Symbol})
precompile(Tuple{typeof(SymPy.gendecl), SymPy.SymDecl})
precompile(Tuple{Base.var"#@elapsed", LineNumberNode, Module, Any})
precompile(Tuple{Crayons.var"#@crayon_str", LineNumberNode, Module, String})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Base.iterate), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.:(==)), Char, Char})
precompile(Tuple{typeof(Base.in), Char, Base.SubString{String}})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String})
precompile(Tuple{Type{Crayons.ANSIStyle}, Bool})
precompile(Tuple{typeof(Base.iterate), Array{Base.SubString{String}, 1}, Int64})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Int64})
precompile(Tuple{typeof(Base.println), LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.println), Base.TTY, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Main.show_result), Function, Float64, Float64, Float64, Int64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Main.get_func_diff), typeof(Main.f)})
precompile(Tuple{PyCall.PyObject, String})
precompile(Tuple{typeof(Base.convert), Type{SymPy.Sym}, PyCall.PyObject})
precompile(Tuple{typeof(Main.f), SymPy.Sym})
precompile(Tuple{PyCall.PyObject, SymPy.Sym})
precompile(Tuple{typeof(Base.:(-)), SymPy.Sym, SymPy.Sym})
precompile(Tuple{typeof(Base.diff), SymPy.Sym})
precompile(Tuple{typeof(Base.push!), Array{SymPy.Sym, 1}, SymPy.Sym})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{SymPy.Sym, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Array{SymPy.Sym, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Array{SymPy.Sym, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Array{SymPy.Sym, 1}}}})
precompile(Tuple{typeof(Base.sortperm), Array{String, 1}})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{String, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{String, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{String, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{SymPy.Sym, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(SymPy.lambdify), SymPy.Sym, Array{SymPy.Sym, 1}})
precompile(Tuple{SymPy.var"##walk_expression#99", Base.Dict{Any, Any}, Base.Dict{Any, Any}, typeof(SymPy.walk_expression), SymPy.Sym})
precompile(Tuple{typeof(Base.merge), Base.Dict{String, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Symbol, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Expr, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Bool, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(PyCall.typetuple), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{SymPy.Sym, SymPy.Sym}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.isvatuple), DataType})
precompile(Tuple{typeof(PyCall.tuptype), DataType, Bool, Int64})
precompile(Tuple{typeof(SymPy.map_fn), String, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Tuple{SymPy.Sym, SymPy.Sym}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{SymPy.Sym}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Tuple{SymPy.Sym}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64, Int64})
precompile(Tuple{typeof(SymPy.expr_to_function), Expr, Array{SymPy.Sym, 1}})
precompile(Tuple{typeof(Main.redefine_func), Function, SymPy.var"#107#108"{SymPy.var"###291"}})
precompile(Tuple{typeof(Main.collect_data), Function, Function, Function, Function, Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{typeof(Base.first), Float64})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.promote), Float64, Float64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(Roots.find_non_zero), Roots.FnWrapper, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Roots._non_zero), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Core.Compiler.return_type), Any, Any, UInt64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Roots.FnWrapper, Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Roots.FnWrapper, Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sign), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sign), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.sign), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.iszero), Float64})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Roots.identify_starting_point), Float64, Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sign), Float64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(Base.:(<)), Float64, Float64})
precompile(Tuple{Type{Roots.ZeroProblem{F, X} where X where F}, Roots.FnWrapper, Tuple{Float64, Float64}})
precompile(Tuple{typeof(CommonSolve.solve), Roots.ZeroProblem{Roots.FnWrapper, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Roots.init_state), Roots.AlefeldPotraShi, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Float64, Float64, Float64, Float64})
precompile(Tuple{Roots.var"##init_state#42", Float64, Float64, typeof(Roots.init_state), Roots.AlefeldPotraShi, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Float64, Float64, Float64, Float64})
precompile(Tuple{Type{Roots.Tracks{T, S} where S where T}, Bool, Roots.NullTracks, Roots.AlefeldPotraShiState{Float64, Float64}})
precompile(Tuple{Type{Roots.ZeroProblemIterator{M, N, F, S, O, L} where L where O where S where F where N where M}, Roots.AlefeldPotraShi, Nothing, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Roots.AlefeldPotraShiState{Float64, Float64}, Roots.FExactOptions{Float64, Float64}, Roots.NullTracks})
precompile(Tuple{ConstructionBase.var"##s26#3", Any, Any})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{CommonSolve.var"#solve!##kw", NamedTuple{(:verbose,), Tuple{Bool}}, typeof(CommonSolve.solve!), Roots.ZeroProblemIterator{Roots.AlefeldPotraShi, Nothing, Roots.Callable_Function{Base.Val{1}, Base.Val{false}, Roots.FnWrapper, Nothing}, Roots.AlefeldPotraShiState{Float64, Float64}, Roots.FExactOptions{Float64, Float64}, Roots.NullTracks}})
precompile(Tuple{typeof(Roots._unitless), Float64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Int64})
precompile(Tuple{typeof(Roots.isneg), Float64})
precompile(Tuple{typeof(Roots.has_converged), Base.Val{:exact}, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Roots.make_intervals!), Array{Roots.Interval{Float64}, 1}, Roots.FnWrapper, Float64, Float64, Array{Float64, 1}, Int64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Float64, Array{Float64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Float64, 1}, Float64})
precompile(Tuple{NLSolversBase.var"##OnceDifferentiable#28", Bool, Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF}, Function, Function, Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{NLsolve.var"##nlsolve#25", Symbol, Float64, Float64, Int64, Bool, Bool, Bool, LineSearches.Static, NLsolve.var"#27#29", Float64, Bool, Int64, Int64, Int64, Float64, typeof(NLsolve.nlsolve), NLSolversBase.OnceDifferentiable{Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{SymPy.var"#107#108"{SymPy.var"###291"}}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{SymPy.var"###291", Float64})
precompile(Tuple{NLSolversBase.var"##OnceDifferentiable#27", Bool, Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF}, Function, Function, Function, Array{Float64, 1}, Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), SymPy.var"#107#108"{SymPy.var"###291"}, Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.hcat), Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Vararg{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.promote_eltype), Array{String, 1}, Array{Float64, 1}, Vararg{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.promote_eltype), Array{Float64, 1}, Array{Float64, 1}, Vararg{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Vararg{Array{Float64, 1}}})
precompile(Tuple{typeof(Base._typed_hcat), Type{Any}, Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:alignment, :header, :header_crayon), Tuple{Array{Symbol, 1}, Array{String, 1}, Crayons.Crayon}}, typeof(PrettyTables.pretty_table), Array{Any, 2}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:alignment, :header, :header_crayon), Tuple{Array{Symbol, 1}, Array{String, 1}, Crayons.Crayon}}, typeof(PrettyTables._pretty_table), IO, Array{Any, 2}})
precompile(Tuple{typeof(PrettyTables._compute_cell_alignment_override), Array{Any, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.isassigned), Array{Any, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Any, 2}, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Float64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}, Pair{Symbol, Bool}})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Base.IOContext{Base.TTY}}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.IOContext{Base.TTY}}}, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(PrettyTables._print_table_header!), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Any, Array{String, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Ref{Any}, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Array{Crayons.Crayon, 1}, Array{Crayons.Crayon, 1}, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Main.f), SymPy.Sym})
precompile(Tuple{PyCall.PyObject})
precompile(Tuple{typeof(Base.exp), SymPy.Sym})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Tuple{SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Tuple{SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Main.redefine_func), Function, SymPy.var"#107#108"{SymPy.var"###292"}})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{SymPy.var"#107#108"{SymPy.var"###292"}}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{SymPy.var"###292", Float64})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), SymPy.var"#107#108"{SymPy.var"###292"}, Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.f), SymPy.Sym})
precompile(Tuple{typeof(Main.redefine_func), Function, SymPy.var"#107#108"{SymPy.var"###293"}})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{SymPy.var"#107#108"{SymPy.var"###293"}}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{SymPy.var"###293", Float64})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), SymPy.var"#107#108"{SymPy.var"###293"}, Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.show_result), Function, Float64, Int64, Float64, Float64, Int64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Main.f), SymPy.Sym})
precompile(Tuple{typeof(Base.:(+)), SymPy.Sym, SymPy.Sym})
precompile(Tuple{typeof(Base.convert), Type{Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym, SymPy.Sym}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym, SymPy.Sym}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.length), Array{SymPy.Sym, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Rational{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Rational{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:ℯ}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:ℯ}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Complex{Bool}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Complex{Bool}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:π}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:π}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:γ}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:γ}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:catalan}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:catalan}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:φ}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.Irrational{:φ}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.MPFR.BigFloat}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Base.MPFR.BigFloat}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, SymPy.Sym})
precompile(Tuple{PyCall.PyObject, SymPy.Sym, Vararg{Any}})
precompile(Tuple{PyCall.var"##_#114", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, SymPy.Sym, Vararg{Any}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{SymPy.Sym, Int64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.:(==)), SymPy.Sym, SymPy.Sym})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}, Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{SymPy.Sym, SymPy.Sym, SymPy.Sym}, SymPy.var"#102#105"{Base.Dict{Any, Any}, Base.Dict{Any, Any}}}, Int64, Int64})
precompile(Tuple{typeof(Main.redefine_func), Function, SymPy.var"#107#108"{SymPy.var"###294"}})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{typeof(Roots.quad_vertex), Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.isnan), Float64})
precompile(Tuple{typeof(Base.prevfloat), Float64})
precompile(Tuple{typeof(Base.eps), Float64})
precompile(Tuple{NLSolversBase.var"#fj!#7"{Main.var"#f!#1"{typeof(Main.f)}, Main.var"#j!#2"{SymPy.var"#107#108"{SymPy.var"###294"}}}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{SymPy.var"###294", Float64})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), SymPy.var"#107#108"{SymPy.var"###294"}, Float64, Float64, Int64, Float64, Float64})
precompile(Tuple{typeof(Main.newton), typeof(Main.f), SymPy.var"#107#108"{SymPy.var"###294"}, Float64, Float64, Int64, Float64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.f), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Markdown.autolink), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.asterisk_italic), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Base.vcat), Float64, Float64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Main.show_result), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:header_crayon, :tf, :noheader, :formatters), T} where T<:Tuple}, Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables.pretty_table), Array{Any, 2}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables._pretty_table), IO, Array{Any, 2}})
precompile(Tuple{Formatting.var"#15#16", Float64})
precompile(Tuple{PrettyTables.var"#52#54"{Array{String, 1}}, Function, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Function})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.IOContext{Base.TTY}}}, typeof(Base.sprint), Function, Function})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Function})
precompile(Tuple{typeof(Base._replace!), Base.var"#new#329"{Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}}}, Array{Any, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String, Vararg{Any}})
precompile(Tuple{PrettyTables.var"#pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables.pretty_table), Array{Float64, 1}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:header_crayon, :tf, :noheader, :formatters), Tuple{Crayons.Crayon, PrettyTables.TextFormat, Bool, PrettyTables.var"#52#54"{Array{String, 1}}}}, typeof(PrettyTables._pretty_table), IO, Array{Float64, 1}})
precompile(Tuple{typeof(PrettyTables._compute_cell_alignment_override), Array{Float64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Float64, Vararg{Number}})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Float64}, Tuple{Int64, Int64, Int64, Int64}, Float64, Vararg{Number}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 2}, Tuple{Float64, Float64, Int64, Int64, Float64, Float64, Float64, Int64, Int64, Float64, Float64, Float64, Int64, Int64, Float64, Float64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Number}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Float64}, Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Number}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 2}, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Base.vcat), Int64, Int64, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Main.show_result), Array{Int64, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 2}, Tuple{Int64, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.vcat), Int64, Float64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Base.hvcat_fill!), Array{Float64, 1}, Tuple{Int64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64}, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Markdown.linebreak), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.escapes), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{OhMyREPL.Prompt.var"#21#48", Any, Any, Any})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
